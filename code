# Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import classification_report, accuracy_score, confusion_matrix

# Load Dataset
data = pd.read_csv("/content/WA_Fn-UseC_-Telco-Customer-Churn.csv")

# Preview Data
print(data.head())
print(data.info())

# Drop customerID (not a predictive feature)
data.drop("customerID", axis=1, inplace=True)

# Convert TotalCharges to numeric (some values may be spaces)
data["TotalCharges"] = pd.to_numeric(data["TotalCharges"], errors='coerce')

# Handle missing values
data.dropna(inplace=True)

# Encode categorical variables
for column in data.select_dtypes(include='object').columns:
    if column != 'Churn':
        data[column] = LabelEncoder().fit_transform(data[column])

# Encode target
data["Churn"] = data["Churn"].map({"Yes": 1, "No": 0})

# Features and Target
X = data.drop("Churn", axis=1)
y = data["Churn"]

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train Decision Tree Classifier
clf = DecisionTreeClassifier(criterion="entropy", max_depth=5, random_state=42)
clf.fit(X_train, y_train)

# Predict
y_pred = clf.predict(X_test)

# Evaluation
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))
print("Classification Report:\n", classification_report(y_test, y_pred))

# Plot the Decision Tree
plt.figure(figsize=(20, 10))
plot_tree(clf, feature_names=X.columns, class_names=["No", "Yes"], filled=True)
plt.title("Decision Tree - Telco Customer Churn")
plt.show()
